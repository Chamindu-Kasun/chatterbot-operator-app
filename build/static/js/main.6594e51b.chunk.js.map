{"version":3,"sources":["assets/images/profile.jpg","components/TopBar/TopBar.jsx","components/Conversations/Conversation.jsx","assets/images/phone.jpg","components/Message/Message.jsx","components/Operators/operators.jsx","context/AuthReducer.js","context/AuthContext.js","components/Alert/AlertMessage.jsx","components/Messenger/Messenger.jsx","components/Register/Register.jsx","context/apiCalls.js","components/Login/Login.jsx","App.jsx","index.js"],"names":["TopBar","className","to","style","textDecoration","Search","placeholder","Person","Chat","Notifications","src","profileImg","alt","Conversation","props","conversation","client","currentUser","client_name","Message","own","message","date","Container","fluid","format","Operators","onlineOperators","currentUserId","setCurrentChat","useState","operators","setOperators","setOnline","useEffect","getOperators","a","axios","get","res","data","filter","operator","includes","_id","map","o","username","AuthReducer","state","action","type","user","isFetching","error","payload","INITIAL_STATE","JSON","parse","localStorage","getItem","AuthContext","createContext","AuthContextProvider","children","useReducer","dispatch","setItem","stringify","Provider","value","AlertMessage","onAccept","show","setShow","Alert","variant","Heading","Button","onClick","Messenger","useContext","conversations","setConversations","currentChat","messages","setMessages","newMessage","setNewMessage","currentClient","setCurrentClient","scrollRef","useRef","socket","messageFromSocket","setMessageFromSocket","setOnlineOperators","current","io","on","sender","receiver","text","createdAt","Date","now","from","getConversations","console","log","getMessages","undefined","handleSubmit","e","preventDefault","conversationId","members","find","member","media","conversation_media","emit","senderId","receiverId","post","scrollIntoView","behavior","users","prev","handleAcceptConfirm","operatorId","sendAcceptConfirmMessage","ClientId","OperatorId","Operator","operatorName","Row","showAlert","Col","xs","lg","md","index","getCurrentChatUser","slice","reverse","ref","onChange","target","Register","email","password","passwordAgain","history","useHistory","handleClick","setCustomValidity","push","onSubmit","required","minLength","loginCall","userCredential","Login","disabled","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6594e51b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/profile.2d3ce0dd.jpg\";","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Search, Person, Chat, Notifications} from \"@material-ui/icons\";\r\nimport profileImg from \"../../assets/images/profile.jpg\"\r\nimport \"./topbar.css\";\r\nimport {Container,Row,Col} from \"react-bootstrap\";\r\n\r\nconst TopBar = () => {\r\n    return (\r\n        <div className=\"topbarContainer px-0\">\r\n            <div className=\"topbarLeft\">\r\n                <Link to=\"/\" style={{ textDecoration: \"none\" }}>\r\n                    <span className=\"logo\">mobiOs</span>\r\n                </Link>\r\n            </div>\r\n            <div className=\"topbarCenter\">\r\n                <div className=\"searchbar\">\r\n                    <Search className=\"searchIcon\" />\r\n                    <input\r\n                        placeholder=\"Search\"\r\n                        className=\"searchInput\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"topbarRight\">\r\n                <div className=\"topbarIcons\">\r\n                    <div className=\"topbarIconItem\">\r\n                        <Person />\r\n                        <span className=\"topbarIconBadge\">1</span>\r\n                    </div>\r\n                    <div className=\"topbarIconItem\">\r\n                        <Chat />\r\n                        <span className=\"topbarIconBadge\">2</span>\r\n                    </div>\r\n                    <div className=\"topbarIconItem\">\r\n                        <Notifications />\r\n                        <span className=\"topbarIconBadge\">1</span>\r\n                    </div>\r\n                </div>\r\n                <img\r\n                    src={profileImg}\r\n                    alt=\"user profile picture\"\r\n                    className=\"topbarImg\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TopBar;","import React from \"react\";\r\nimport \"./conversation.css\"\r\nimport phoneImg from \"../../assets/images/phone.jpg\"\r\n\r\nconst Conversation = (props) => {\r\n    const {conversation, currentUser} = props;\r\n    // const senderId = conversation.members.find((member) => member !== currentUser._id);\r\n    const client = conversation.client_name\r\n\r\n    return (\r\n        <div className=\"conversation\">\r\n            <img\r\n                className={\"conversationImg\"}\r\n                src={\"https://images.pexels.com/photos/4547577/pexels-photo-4547577.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=500\"}\r\n                alt={\"\"}\r\n            />\r\n            <span className=\"conversationName\">{client}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Conversation;","export default __webpack_public_path__ + \"static/media/phone.d9f11590.jpg\";","import profileImg from \"../../assets/images/profile.jpg\";\r\nimport \"./Message.css\"\r\nimport {format} from \"timeago.js\";\r\nimport {Container,Row,Col} from \"react-bootstrap\";\r\n\r\nconst Message = ({own, message, date}) => {\r\n    return (\r\n        <Container fluid={true}>\r\n        <div className={own === true ? \"message own\" : \"message\"}>\r\n            <div className={\"messageTop\"}>\r\n                <img\r\n                    className={\"messageImg\"}\r\n                    src={own === true ? profileImg : \"https://images.pexels.com/photos/4547577/pexels-photo-4547577.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=500\"}\r\n                    alt={\"\"}\r\n                />\r\n                <div className={\"messageText\"}>\r\n                    {message}\r\n                    <p className=\"messageBottom\">{format(date)}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Message;","import React, {useState, useEffect} from \"react\";\r\nimport \"./operators.css\"\r\nimport axios from \"axios\";\r\n\r\nconst Operators = (props) => {\r\n    const { onlineOperators,currentUserId,setCurrentChat} = props;\r\n    const [operators, setOperators] = useState([])\r\n    const [online, setOnline] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const getOperators = async () => {\r\n            const res = await axios.get(\"https://mobios-chatter-app-backend.herokuapp.com/api/operators\")\r\n            setOperators(res.data);\r\n        }\r\n        getOperators();\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        setOnline(operators.filter((operator) => onlineOperators.includes(operator._id)))\r\n    },[onlineOperators, operators])\r\n\r\n\r\n    return(\r\n        <div className=\"chatOnline\">\r\n            {operators.map((o) => (\r\n            <div  key={o._id} className=\"chatOnlineFriend\">\r\n                <div className=\"chatOnlineImgContainer\">\r\n                    <img\r\n                        className=\"chatOnlineImg\"\r\n                        src={\r\n                            \"https://images.pexels.com/photos/1391498/pexels-photo-1391498.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\"\r\n                        }\r\n                        alt=\"\"\r\n                    />\r\n                    <div className=\"chatOnlineBadge\"></div>\r\n                </div>\r\n                <span className=\"chatOnlineName\">{o?.username}</span>\r\n            </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Operators;","const AuthReducer = (state, action) => {\r\n    switch(action.type){\r\n        case \"LOGIN_START\":\r\n            return {\r\n                user: null,\r\n                isFetching: true,\r\n                error: false,\r\n            };\r\n        case \"LOGIN_SUCCESS\":\r\n            return {\r\n                user: action.payload,\r\n                isFetching: false,\r\n                error: false,\r\n            };\r\n        case \"LOGIN_FAILURE\":\r\n            return {\r\n                user: null,\r\n                isFetching: false,\r\n                error: true,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default AuthReducer;","import {createContext, useReducer, useEffect} from \"react\";\r\nimport AuthReducer from \"./AuthReducer\";\r\n\r\nconst INITIAL_STATE = {\r\n    user: JSON.parse(localStorage.getItem(\"user\")) || null,\r\n    isFetching: false,\r\n    error: false\r\n};\r\n\r\nexport const AuthContext = createContext(INITIAL_STATE);\r\n\r\nexport const AuthContextProvider = ({children} ) => {\r\n    const [state, dispatch] = useReducer(AuthReducer,INITIAL_STATE);\r\n\r\n    useEffect(()=>{\r\n        localStorage.setItem(\"user\", JSON.stringify(state.user))\r\n    },[state.user])\r\n\r\n    return(\r\n        <AuthContext.Provider\r\n            value={{\r\n                user: state.user,\r\n                isFetching: state.isFetching,\r\n                error: state.error,\r\n                dispatch,\r\n            }}\r\n        >\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport {useState, useEffect} from \"react\";\r\n\r\nconst AlertMessage = (props) => {\r\n    const {onAccept,client} = props;\r\n    const [show, setShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setShow(true);\r\n    },[client])\r\n\r\n        return (\r\n            <>\r\n                <Alert show={show} variant=\"success\">\r\n                    <Alert.Heading>Operator Requested !</Alert.Heading>\r\n                    <p>\r\n                        A client has requested for an operator support. Are you available now?\r\n                    </p>\r\n                    <hr/>\r\n                    <div className=\"d-flex justify-content-end\">\r\n                        <Button onClick={() => {\r\n                            setShow(false)\r\n                            onAccept()\r\n                        }} variant=\"outline-success\">\r\n                            Available!\r\n                        </Button>\r\n                        <Button className={\"ms-5\"} onClick={() => setShow(false)} variant=\"outline-danger\">\r\n                            Not Available!\r\n                        </Button>\r\n                    </div>\r\n                </Alert>\r\n            </>\r\n        );\r\n}\r\n\r\nexport default AlertMessage;","import \"./messenger.css\";\r\nimport TopBar from \"../TopBar/TopBar\";\r\nimport Conversation from \"../Conversations/Conversation\";\r\nimport Message from \"../Message/Message\";\r\nimport Operators from \"../Operators/operators\";\r\nimport {useContext, useState, useEffect, useRef} from \"react\";\r\nimport {AuthContext} from \"../../context/AuthContext\";\r\nimport axios from \"axios\";\r\nimport { io } from \"socket.io-client\";\r\nimport AlertMessage from \"../Alert/AlertMessage\";\r\nimport {Container,Row,Col} from \"react-bootstrap\";\r\n\r\nconst Messenger = () => {\r\n    //get current operator\r\n    const {user} = useContext(AuthContext);\r\n\r\n    //conversations\r\n    const [conversations, setConversations] = useState([]);\r\n    const [currentChat, setCurrentChat] = useState(null);\r\n    const [messages, setMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n    const [currentClient, setCurrentClient] = useState(null);\r\n\r\n    //scroll\r\n    const scrollRef = useRef();\r\n    const socket = useRef()\r\n\r\n    //socket\r\n    const [messageFromSocket, setMessageFromSocket] = useState(null);\r\n    const [onlineOperators, setOnlineOperators] = useState([]);\r\n\r\n    useEffect(() => {\r\n        socket.current = io(\"https://chatter-bot-app-socket-server.herokuapp.com\");\r\n        socket.current.on(\"getMessage\", (data) => {\r\n            setMessageFromSocket({\r\n                sender: data.receiver,\r\n                text: data.text,\r\n                createdAt: Date.now(),\r\n            })\r\n        });\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        socket.current.on(\"newClient\", (message) => {\r\n            setCurrentClient({\r\n                sender: message.from,\r\n                client: message.client,\r\n                createdAt: Date.now(),\r\n            })\r\n        });\r\n    },[])\r\n\r\n    //get conversations\r\n    useEffect(() => {\r\n        const getConversations = async () => {\r\n            try {\r\n                const res = await axios.get(\"https://mobios-chatter-app-backend.herokuapp.com/api/conversations/\" + user._id)\r\n                console.log(\"Conversations\", res.data)\r\n                setConversations(res.data);\r\n            } catch (err) {\r\n                console.log(err)\r\n            }\r\n        };\r\n        getConversations();\r\n    }, [user._id,currentClient])\r\n\r\n    //get messages\r\n    useEffect(() => {\r\n        const getMessages = async () => {\r\n            try {\r\n                if(currentClient !== undefined) {\r\n                    const res = await axios.get(\"https://mobios-chatter-app-backend.herokuapp.com/api/messages/\" + currentChat?._id);\r\n                    setMessages(res.data);\r\n                }\r\n            } catch (err) {\r\n                console.log(err)\r\n            }\r\n        };\r\n        getMessages();\r\n    }, [currentChat])\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const message = {\r\n            sender: user._id,\r\n            text: newMessage,\r\n            conversationId: currentChat._id\r\n        };\r\n\r\n        const receiver = currentChat.members.find(member => member !== user._id);\r\n        const media = currentChat.conversation_media\r\n\r\n        //send msg to socket server\r\n        socket.current.emit(\"sendMessage\",{\r\n            senderId : user._id,\r\n            receiverId : \"123456789\",\r\n            text: newMessage,\r\n            receiver,\r\n            media\r\n        })\r\n\r\n        //send msg to db\r\n        try {\r\n            const res = await axios.post(\"https://mobios-chatter-app-backend.herokuapp.com/api/messages\", message);\r\n            setMessages([res.data,...messages]);\r\n            setNewMessage(\"\");\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        scrollRef.current?.scrollIntoView({behavior: \"smooth\"});\r\n    }, [messages]);\r\n\r\n    //operator socket connection\r\n     useEffect(()=>{\r\n        socket.current.emit(\"addUser\", user._id , (error) => {\r\n            if(error){\r\n                console.log(error);\r\n            }\r\n        });\r\n\r\n         socket.current.on(\"getUsers\", users => {\r\n             setOnlineOperators(users);\r\n         })\r\n     },[user])\r\n\r\n    useEffect(() => {\r\n        messageFromSocket &&\r\n            currentChat?.members.includes(messageFromSocket.sender) &&\r\n            setMessages((prev) => [ messageFromSocket, ...prev]);\r\n        // setMessages([ ...messages,messageFromSocket]);\r\n    },[messageFromSocket,currentChat])\r\n\r\n\r\n    const handleAcceptConfirm = async() => {\r\n            socket.current.emit(\"clientAccepted\", {\r\n                operatorId: user._id,\r\n                receiverId: \"123456789\"\r\n            })\r\n            await sendAcceptConfirmMessage(currentClient.client.senderId,user._id, user.username, currentClient.client.media);\r\n            setCurrentClient(null)\r\n    }\r\n\r\n    const sendAcceptConfirmMessage =async (ClientId,OperatorId, Operator,media) => {\r\n            const client = {\r\n                senderId: ClientId,\r\n                operatorId: OperatorId,\r\n                operatorName: Operator,\r\n                media: media,\r\n            };\r\n            await axios.post(\"https://mobios-chatter-app-backend.herokuapp.com/operator\", client);\r\n    }\r\n\r\n    const showAlert = () => {\r\n        if(currentClient !== null) {\r\n            return (\r\n                <AlertMessage\r\n                    client={currentClient}\r\n                    onAccept={handleAcceptConfirm}\r\n                />\r\n            );\r\n        }\r\n    }\r\n\r\n    const getCurrentChatUser = () => {\r\n        const client = currentChat.client_name\r\n        const media = currentChat.conversation_media\r\n\r\n        return(\r\n            <div className=\"mx-1\">{client} from {media}</div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <TopBar/>\r\n            </Row>\r\n            {showAlert()}\r\n            <Row className=\"messenger\">\r\n                    <Col className=\"chatMenu px-0\" xs={12} lg={3} md={3}>\r\n                        <div className=\"chatMenuWrapper\">\r\n                            <h4 className=\"rightbarTitle\">Client Messages</h4>\r\n                            {/*Map each conversation*/}\r\n                            {conversations.map((conversation, index) => (\r\n                                <div onClick={() => setCurrentChat(conversation)} key={index}>\r\n                                    <Conversation\r\n                                        key={index}\r\n                                        conversation={conversation}\r\n                                        currentUser={user}\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col className=\"chatBox px-0 py-0\" xs={12} lg={6} md={9}>\r\n                        <div className=\"chatBoxWrapper px-0 mx-3 py-0\">\r\n                            {currentChat ? (\r\n                                    <>\r\n                                        <Row className=\"py-3 active-chat px-0 \">\r\n                                            <Col className=\"text-center\">\r\n                                                {getCurrentChatUser()}\r\n                                            </Col>\r\n                                        </Row>\r\n\r\n                                        <Row className=\"chatBoxTop\">\r\n                                            {/*Map each message*/}\r\n                                            {messages.slice(0).reverse().map((message, index) => (\r\n                                                <div className=\"chatBoxMsg my-0 py-0\" ref={scrollRef} key={index}>\r\n                                                    <Message\r\n                                                        key={index}\r\n                                                        message={message.text}\r\n                                                        date={message.createdAt}\r\n                                                        own={message.sender === user._id}\r\n                                                    />\r\n                                                </div>\r\n                                            ))}\r\n                                        </Row>\r\n                                        <Row className=\"chatBoxBottom py-2\">\r\n                                            <Col lg={10} className=\"mx-0\" >\r\n                                                 <textarea\r\n                                                     className=\"chatMessageInput\"\r\n                                                     placeholder=\"message\"\r\n                                                     onChange={(e) => setNewMessage(e.target.value)}\r\n                                                     value={newMessage}\r\n                                                 />\r\n                                            </Col>\r\n                                            <Col lg={2}>\r\n                                                <button\r\n                                                    className=\"chatSubmitButton\"\r\n                                                    onClick={handleSubmit}\r\n                                                >Send\r\n                                                </button>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </>\r\n                                ) :\r\n                                <span className=\"noConversationText\">\r\n                                    Select a conversation to response.\r\n                                </span>\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col className=\"chatOnline\" xs={12} lg={3} md={3}>\r\n                        <div className=\"chatOnlineWrapper\">\r\n                            <h4 className=\"rightbarTitle\">Operators</h4>\r\n                            <Operators\r\n                               onlineOperators = {onlineOperators}\r\n                               currentUserId = {user._id}\r\n                               setCurrentChat = {setCurrentChat}\r\n                            />\r\n                        </div>\r\n                    </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Messenger;","import React from \"react\";\r\nimport \"./register.css\"\r\nimport axios from \"axios\";\r\nimport { useRef } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst Register = () => {\r\n    const username = useRef();\r\n    const email = useRef();\r\n    const password = useRef();\r\n    const passwordAgain = useRef();\r\n    const history = useHistory();\r\n\r\n    const handleClick = async (e) => {\r\n        e.preventDefault();\r\n        if (passwordAgain.current.value !== password.current.value) {\r\n            passwordAgain.current.setCustomValidity(\"Passwords don't match!\");\r\n        } else {\r\n            const user = {\r\n                username: username.current.value,\r\n                email: email.current.value,\r\n                password: password.current.value,\r\n            };\r\n            console.log(\"user\", user);\r\n            try {\r\n                console.log(\"user\", user)\r\n                await axios.post(\"https://mobios-chatter-app-backend.herokuapp.com/api/auth/register\", user);\r\n                history.push(\"/login\");\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"loginWrapper\">\r\n                <div className=\"loginLeft\">\r\n                    <h3 className=\"loginLogo\">ChatterBot</h3>\r\n                    <span className=\"loginDesc\">\r\n            Operator registration interface for the ChatterBot application.\r\n          </span>\r\n                </div>\r\n                <div className=\"loginRight\">\r\n                    <form className=\"loginBox\" onSubmit={handleClick}>\r\n                        <input\r\n                            placeholder=\"Username\"\r\n                            required\r\n                            ref={username}\r\n                            className=\"loginInput\"\r\n                        />\r\n                        <input\r\n                            placeholder=\"Email\"\r\n                            required\r\n                            ref={email}\r\n                            className=\"loginInput\"\r\n                            type=\"email\"\r\n                        />\r\n                        <input\r\n                            placeholder=\"Password\"\r\n                            required\r\n                            ref={password}\r\n                            className=\"loginInput\"\r\n                            type=\"password\"\r\n                            minLength=\"6\"\r\n                        />\r\n                        <input\r\n                            placeholder=\"Password Again\"\r\n                            required\r\n                            ref={passwordAgain}\r\n                            className=\"loginInput\"\r\n                            type=\"password\"\r\n                        />\r\n                        <button className=\"loginButton\" type=\"submit\">\r\n                            Sign Up\r\n                        </button>\r\n                        <button className=\"loginRegisterButton\">Log into Account</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Register;","import axios from \"axios\";\r\n\r\nexport const loginCall = async (userCredential, dispatch) => {\r\n    dispatch({ type: \"LOGIN_START\" });\r\n    try {\r\n        const res = await axios.post(\"https://mobios-chatter-app-backend.herokuapp.com/api/auth/login\", userCredential);\r\n        dispatch({ type: \"LOGIN_SUCCESS\", payload: res.data });\r\n    } catch (err) {\r\n        dispatch({ type: \"LOGIN_FAILURE\", payload: err });\r\n    }\r\n};","import React from \"react\";\r\nimport { useContext, useRef } from \"react\";\r\nimport {loginCall} from \"../../context/apiCalls\";\r\nimport { AuthContext } from \"../../context/AuthContext\";\r\nimport \"./login.css\"\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\nconst Login = () => {\r\n    const email = useRef();\r\n    const password = useRef();\r\n    const { isFetching, dispatch } = useContext(AuthContext);\r\n\r\n    const handleClick = (e) => {\r\n       e.preventDefault();\r\n        loginCall(\r\n            { email: email.current.value, password: password.current.value },\r\n            dispatch\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"loginWrapper\">\r\n                <div className=\"loginLeft\">\r\n                    <h3 className=\"loginLogo\">ChatterBot</h3>\r\n                    <span className=\"loginDesc\">\r\n            Operator login interface for the ChatterBot application.\r\n          </span>\r\n                </div>\r\n                <div className=\"loginRight\">\r\n                    <form className=\"loginBox\" onSubmit={handleClick}>\r\n                        <input\r\n                            placeholder=\"Email\"\r\n                            type=\"email\"\r\n                            required\r\n                            className=\"loginInput\"\r\n                            ref={email}\r\n                        />\r\n                        <input\r\n                            placeholder=\"Password\"\r\n                            type=\"password\"\r\n                            required\r\n                            minLength=\"6\"\r\n                            className=\"loginInput\"\r\n                            ref={password}\r\n                        />\r\n                        <button className=\"loginButton\" type=\"submit\" disabled={isFetching}>\r\n                            {isFetching ? (\r\n                                \"loading\"\r\n                                // <CircularProgress color=\"primary\" size=\"20px\"/>\r\n                            ) : (\r\n                                \"Log In\"\r\n                            )}\r\n                        </button>\r\n                        <span className=\"loginForgot\">Forgot Password?</span>\r\n                        <button className=\"loginRegisterButton\">\r\n                            {isFetching ? (\r\n                                \"loading\"\r\n                                // <CircularProgress color=\"primary\" size=\"20px\"/>\r\n                            ) : (\r\n                                \"Create a New Account\"\r\n                            )}\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import Messenger from \"./components/Messenger/Messenger\";\r\nimport { Route, Switch, Redirect, BrowserRouter as  Router } from \"react-router-dom\";\r\nimport Register from \"./components/Register/Register\";\r\nimport { useContext } from \"react\";\r\nimport { AuthContext } from \"./context/AuthContext\";\r\nimport Login from \"./components/Login/Login\";\r\nimport \"./App.css\"\r\n\r\nfunction App (){\r\n    const { user } = useContext(AuthContext);\r\n    return (\r\n        <Router>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        {user ? <Messenger/> :  <Register/>}\r\n                    </Route>\r\n                    <Route exact path=\"/register\">\r\n                        {user ? <Redirect to=\"/\" /> : <Register />}\r\n                    </Route>\r\n                    <Route path=\"/login\">{user ? <Redirect to=\"/\" /> : <Login />}</Route>\r\n                </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\"\r\nimport App from \"./App\"\r\nimport {AuthContextProvider} from \"./context/AuthContext\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <AuthContextProvider>\r\n            <App/>\r\n        </AuthContextProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}